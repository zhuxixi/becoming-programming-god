package org.zhuzhenxi.becoming.comment.algs4.algs11;

import java.util.HashMap;
import java.util.Map;

/**
 * public class Fibonacci
 * {
 * public static long f(int N)
 * {
 * if (N == 0) return 0;
 * if (N == 1) return 1;
 * return f(N-1) + f(N-2);
 * }
 * public static void main(String[] args)
 * {
 * for (int N = 0; N < 100; N++)
 * StdOut.println(N + " " + f(N));
 * }
 * }
 * 计算机用这段程序在一个小时之内能够得到 f(N) 结果的最大 N 值是多少？开发 f(N) 的一
 * 个更好的实现，用数组保存已经计算过的值。
 */
public class Algs1119 {

    //用map作缓存，可以算到1820680
    private static final Map<Integer,Long> CACHE = new HashMap<>();
    //用数组做缓存，可以算到2081385
    private static final long[] CACHE2 = new long[3000000];

    public static void main(String[] args) {
        long start = System.currentTimeMillis();

        //2046250635
        long time = 30 * 1000;
        int n = 0;
        while (time > 0) {
            long result = f(n);
//            CACHE.put(n,result);
            CACHE2[n] = result;
            long end = System.currentTimeMillis();
            long currentCost = end - start;
            time = time - currentCost;
            print(n,result,currentCost,time);
            start = end;
            n += 1;
        }
        System.out.println("可以计算的斐波那契最大整数:"+(n-1));
        System.out.println("缓存数量="+CACHE.size());

    }

    /**
     * 无缓存的斐波那契数列
     * @param n
     * @return
     */
    private static long f(int n) {
        if (n == 0) {
            return 0;
        }
        if (n == 1) {
            return 1;
        }
        Long a = CACHE2[n-1];
        Long b = CACHE2[n-2];
//        if (a!=0&&b!=0){
//            return a+b;
//        }
//        if (a==0&&b!=0){
//            return f(n - 1)+b;
//        }
//        if (a!=0){
//            return a+f(n - 2);
//        }
        return a+b;
    }
    private static void print(int index,long result,long currentCost,long time){
        System.out.println("当前计算n=" + index);
        System.out.println("f(n)=" + result);
        System.out.println("当前计算耗时:" + currentCost);
        System.out.println("剩余时间:" + time);
        System.out.println();

    }

    /**
     * 当前计算n=0
     * f(n)=0
     * 当前计算耗时:0
     * 剩余时间:30000
     *
     * 当前计算n=1
     * f(n)=1
     * 当前计算耗时:0
     * 剩余时间:30000
     *
     * 当前计算n=2
     * f(n)=1
     * 当前计算耗时:0
     * 剩余时间:30000
     *
     * 当前计算n=3
     * f(n)=2
     * 当前计算耗时:0
     * 剩余时间:30000
     *
     * 当前计算n=4
     * f(n)=3
     * 当前计算耗时:0
     * 剩余时间:30000
     *
     * 当前计算n=5
     * f(n)=5
     * 当前计算耗时:0
     * 剩余时间:30000
     *
     * 当前计算n=6
     * f(n)=8
     * 当前计算耗时:1
     * 剩余时间:29999
     *
     * 当前计算n=7
     * f(n)=13
     * 当前计算耗时:0
     * 剩余时间:29999
     *
     * 当前计算n=8
     * f(n)=21
     * 当前计算耗时:0
     * 剩余时间:29999
     *
     * 当前计算n=9
     * f(n)=34
     * 当前计算耗时:0
     * 剩余时间:29999
     *
     * 当前计算n=10
     * f(n)=55
     * 当前计算耗时:0
     * 剩余时间:29999
     *
     * 当前计算n=11
     * f(n)=89
     * 当前计算耗时:0
     * 剩余时间:29999
     *
     * 当前计算n=12
     * f(n)=144
     * 当前计算耗时:0
     * 剩余时间:29999
     *
     * 当前计算n=13
     * f(n)=233
     * 当前计算耗时:0
     * 剩余时间:29999
     *
     * 当前计算n=14
     * f(n)=377
     * 当前计算耗时:0
     * 剩余时间:29999
     *
     * 当前计算n=15
     * f(n)=610
     * 当前计算耗时:0
     * 剩余时间:29999
     *
     * 当前计算n=16
     * f(n)=987
     * 当前计算耗时:0
     * 剩余时间:29999
     *
     * 当前计算n=17
     * f(n)=1597
     * 当前计算耗时:1
     * 剩余时间:29998
     *
     * 当前计算n=18
     * f(n)=2584
     * 当前计算耗时:0
     * 剩余时间:29998
     *
     * 当前计算n=19
     * f(n)=4181
     * 当前计算耗时:0
     * 剩余时间:29998
     *
     * 当前计算n=20
     * f(n)=6765
     * 当前计算耗时:0
     * 剩余时间:29998
     *
     * 当前计算n=21
     * f(n)=10946
     * 当前计算耗时:0
     * 剩余时间:29998
     *
     * 当前计算n=22
     * f(n)=17711
     * 当前计算耗时:0
     * 剩余时间:29998
     *
     * 当前计算n=23
     * f(n)=28657
     * 当前计算耗时:1
     * 剩余时间:29997
     *
     * 当前计算n=24
     * f(n)=46368
     * 当前计算耗时:0
     * 剩余时间:29997
     *
     * 当前计算n=25
     * f(n)=75025
     * 当前计算耗时:0
     * 剩余时间:29997
     *
     * 当前计算n=26
     * f(n)=121393
     * 当前计算耗时:1
     * 剩余时间:29996
     *
     * 当前计算n=27
     * f(n)=196418
     * 当前计算耗时:1
     * 剩余时间:29995
     *
     * 当前计算n=28
     * f(n)=317811
     * 当前计算耗时:1
     * 剩余时间:29994
     *
     * 当前计算n=29
     * f(n)=514229
     * 当前计算耗时:2
     * 剩余时间:29992
     *
     * 当前计算n=30
     * f(n)=832040
     * 当前计算耗时:3
     * 剩余时间:29989
     *
     * 当前计算n=31
     * f(n)=1346269
     * 当前计算耗时:5
     * 剩余时间:29984
     *
     * 当前计算n=32
     * f(n)=2178309
     * 当前计算耗时:7
     * 剩余时间:29977
     *
     * 当前计算n=33
     * f(n)=3524578
     * 当前计算耗时:14
     * 剩余时间:29963
     *
     * 当前计算n=34
     * f(n)=5702887
     * 当前计算耗时:24
     * 剩余时间:29939
     *
     * 当前计算n=35
     * f(n)=9227465
     * 当前计算耗时:32
     * 剩余时间:29907
     *
     * 当前计算n=36
     * f(n)=14930352
     * 当前计算耗时:73
     * 剩余时间:29834
     *
     * 当前计算n=37
     * f(n)=24157817
     * 当前计算耗时:87
     * 剩余时间:29747
     *
     * 当前计算n=38
     * f(n)=39088169
     * 当前计算耗时:136
     * 剩余时间:29611
     *
     * 当前计算n=39
     * f(n)=63245986
     * 当前计算耗时:260
     * 剩余时间:29351
     *
     * 当前计算n=40
     * f(n)=102334155
     * 当前计算耗时:363
     * 剩余时间:28988
     *
     * 当前计算n=41
     * f(n)=165580141
     * 当前计算耗时:545
     * 剩余时间:28443
     *
     * 当前计算n=42
     * f(n)=267914296
     * 当前计算耗时:881
     * 剩余时间:27562
     *
     * 当前计算n=43
     * f(n)=433494437
     * 当前计算耗时:1423
     * 剩余时间:26139
     *
     * 当前计算n=44
     * f(n)=701408733
     * 当前计算耗时:2301
     * 剩余时间:23838
     *
     * 当前计算n=45
     * f(n)=1134903170
     * 当前计算耗时:3734
     * 剩余时间:20104
     *
     * 当前计算n=46
     * f(n)=1836311903
     * 当前计算耗时:6031
     * 剩余时间:14073
     *
     * 当前计算n=47
     * f(n)=2971215073
     * 当前计算耗时:9735
     * 剩余时间:4338
     *
     * 当前计算n=48
     * f(n)=4807526976
     * 当前计算耗时:15784
     * 剩余时间:-11446
     *
     * 49
     */

}
